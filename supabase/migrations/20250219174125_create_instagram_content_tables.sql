-- Create narrative_episodes table
CREATE TABLE narrative_episodes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id UUID REFERENCES cuentas(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    closure_type TEXT CHECK (closure_type IN ('complete', 'cliffhanger')),
    arc_name TEXT,
    position_x FLOAT NOT NULL,
    position_y FLOAT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create episode_tags table
CREATE TABLE episode_tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    episode_id BIGINT REFERENCES narrative_episodes(id) ON DELETE CASCADE,
    tag_name TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(episode_id, tag_name)
);

-- Create episode_connections table
CREATE TABLE episode_connections (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    from_episode_id BIGINT REFERENCES narrative_episodes(id) ON DELETE CASCADE,
    to_episode_id BIGINT REFERENCES narrative_episodes(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(from_episode_id, to_episode_id),
    CHECK (from_episode_id != to_episode_id)
);

-- Create simple_posts table for Personal and Behind the Scenes content
CREATE TABLE simple_posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id UUID REFERENCES cuentas(id) ON DELETE CASCADE,
    post_type TEXT CHECK (post_type IN ('personal', 'behindScenes')) NOT NULL,
    description TEXT NOT NULL,
    image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create trigger to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add triggers to tables that need updated_at
CREATE TRIGGER update_narrative_episodes_updated_at
    BEFORE UPDATE ON narrative_episodes
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_simple_posts_updated_at
    BEFORE UPDATE ON simple_posts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for better query performance
CREATE INDEX idx_narrative_episodes_account_id ON narrative_episodes(account_id);
CREATE INDEX idx_narrative_episodes_arc_name ON narrative_episodes(arc_name);
CREATE INDEX idx_episode_tags_episode_id ON episode_tags(episode_id);
CREATE INDEX idx_episode_tags_tag_name ON episode_tags(tag_name);
CREATE INDEX idx_episode_connections_from_episode_id ON episode_connections(from_episode_id);
CREATE INDEX idx_episode_connections_to_episode_id ON episode_connections(to_episode_id);
CREATE INDEX idx_simple_posts_account_id_type ON simple_posts(account_id, post_type);

-- Add RLS policies
ALTER TABLE narrative_episodes ENABLE ROW LEVEL SECURITY;
ALTER TABLE episode_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE episode_connections ENABLE ROW LEVEL SECURITY;
ALTER TABLE simple_posts ENABLE ROW LEVEL SECURITY;

-- Policy for narrative_episodes
CREATE POLICY "Users can only access their own narrative episodes"
    ON narrative_episodes
    FOR ALL
    USING (account_id = auth.uid());

-- Policy for episode_tags (through narrative_episodes)
CREATE POLICY "Users can only access tags for their own episodes"
    ON episode_tags
    FOR ALL
    USING (
        episode_id IN (
            SELECT id FROM narrative_episodes
            WHERE account_id = auth.uid()
        )
    );

-- Policy for episode_connections (through narrative_episodes)
CREATE POLICY "Users can only access connections for their own episodes"
    ON episode_connections
    FOR ALL
    USING (
        from_episode_id IN (
            SELECT id FROM narrative_episodes
            WHERE account_id = auth.uid()
        )
    );

-- Policy for simple_posts
CREATE POLICY "Users can only access their own simple posts"
    ON simple_posts
    FOR ALL
    USING (account_id = auth.uid());
